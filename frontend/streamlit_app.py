import streamlit as st
import requests
import pandas as pd
import plotly.express as px

st.set_page_config(page_title="H·ªá Th·ªëng G·ª£i √ù Phim", layout="wide")

st.title("üé¨ H·ªá Th·ªëng G·ª£i √ù Phim Th√¥ng Minh")

st.sidebar.header("üîç B·ªô L·ªçc Phim")

feature = st.sidebar.selectbox("Ch·ªçn Ch·ª©c NƒÉng", [
    "Kh√°m Ph√° Phim", 
    "G·ª£i √ù Theo Phim", 
    "G·ª£i √ù Theo Th·ªÉ Lo·∫°i",
    "Th·ªëng K√™"
])

API_BASE_URL = "http://localhost:8000"

def fetch_movies(params=None):
    try:
        response = requests.get(f"{API_BASE_URL}/movies", params=params)
        data = response.json()
        if isinstance(data, list):
            return data
        else:
            st.error(f"ƒê·ªãnh d·∫°ng d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá: {data}")
            return []
    except Exception as e:
        st.error(f"L·ªói k·∫øt n·ªëi: {e}")
        return []

def main_exploration():
    st.subheader("üåü Kh√°m Ph√° Phim")
    # Debug: Ki·ªÉm tra d·ªØ li·ªáu API
    with st.expander("Debug API Data"):
        raw_data = fetch_movies()
        st.json(raw_data)
    col1, col2, col3 = st.columns(3)
    
    with col1:
        genre = st.selectbox("Th·ªÉ Lo·∫°i", ["T·∫•t C·∫£", "Action", "Comedy", "Drama", "Thriller", "Adventure"])
    
    with col2:
        min_rating = st.slider("ƒêi·ªÉm T·ªëi Thi·ªÉu", 0.0, 10.0, 7.0)
    
    with col3:
        year = st.number_input("NƒÉm", 2000, 2024, 2020)
    
    params = {}
    if genre != "T·∫•t C·∫£":
        params["genre"] = genre
    if min_rating > 0:
        params["min_rating"] = min_rating
    if year:
        params["year"] = year
    
    movies = fetch_movies(params)
    
    if not movies:
        st.warning("Kh√¥ng t√¨m th·∫•y phim n√†o ph√π h·ª£p v·ªõi b·ªô l·ªçc. Vui l√≤ng th·ª≠ l·∫°i v·ªõi b·ªô l·ªçc kh√°c.")
    
    for movie in movies:
        col1, col2 = st.columns([1, 4])
        
        with col1:
            if movie.get('poster_path'):
                poster_url = f"https://image.tmdb.org/t/p/w200{movie.get('poster_path')}"
                try:
                    st.image(poster_url, width=150)
                except:
                    st.image("https://via.placeholder.com/150x225?text=No+Poster", width=150)
            else:
                st.image("https://via.placeholder.com/150x225?text=No+Poster", width=150)
        
        with col2:
            st.write(f"**{movie['title']}** (ƒêi·ªÉm: {movie.get('vote_average', 'N/A')})")
            st.write(movie.get('overview', 'Kh√¥ng c√≥ m√¥ t·∫£'))
            
            # Hi·ªÉn th·ªã th·ªÉ lo·∫°i
            if movie.get('genres'):
                genres_text = ", ".join([g['name'] for g in movie['genres']])
                st.write(f"**Th·ªÉ lo·∫°i:** {genres_text}")
        
        st.markdown("---")
def recommendation_by_movie():
    st.subheader("üéØ G·ª£i √ù Theo Phim")
    movie_id = st.number_input("Nh·∫≠p ID Phim", min_value=1)
    
    if st.button("Xem G·ª£i √ù"):
        try:
            response = requests.get(f"{API_BASE_URL}/recommendations/movie/{movie_id}")
            recommendations = response.json()
            
            for movie in recommendations:
                col1, col2 = st.columns([1, 4])
                
                with col1:
                    poster_url = f"https://image.tmdb.org/t/p/w200{movie.get('poster_path')}"
                    st.image(poster_url if movie.get('poster_path') else "https://via.placeholder.com/200x300", width=150)
                
                with col2:
                    st.write(f"**{movie['title']}** (ƒêi·ªÉm: {movie['vote_average']})")
                    st.write(movie['overview'])
                
                st.markdown("---")
        except Exception as e:
            st.error(f"L·ªói: {e}")

def main():
    if feature == "Kh√°m Ph√° Phim":
        main_exploration()
    elif feature == "G·ª£i √ù Theo Phim":
        recommendation_by_movie()

if __name__ == "__main__":
    main()